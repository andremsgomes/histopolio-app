{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport { Link } from \"react-router-dom\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport Store from \"../components/Store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n      question: null,\n      content: \"\",\n      storeOpen: false,\n      badges: [],\n      points: 0,\n      position: 0,\n      rank: 0,\n      userBadges: []\n    };\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleContentClick = this.handleContentClick.bind(this);\n    this.handleStoreClick = this.handleStoreClick.bind(this);\n    this.handleCloseStoreClick = this.handleCloseStoreClick.bind(this);\n    this.handleBadgePurchased = this.handleBadgePurchased.bind(this);\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.loadBadges();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\",\n      // TODO: ter no url\n      saveFile: \"Turma1.json\" // TODO: retirar\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  loadBadges() {\n    const dataToSend = {\n      type: \"load badges\",\n      board: \"Histopolio\" // TODO: ter no url\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n\n      case \"badges\":\n        this.handleBadgesReceived(dataReceived);\n        break;\n\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n\n      case \"info shown\":\n        this.hideDice();\n        break;\n\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      case \"update\":\n        this.handleUpdate(dataReceived);\n        break;\n\n      case \"content\":\n        this.handleContentReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n\n    if (dataReceived[\"playerData\"]) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n        rank: dataReceived[\"playerData\"][\"rank\"],\n        userBadges: dataReceived[\"playerData\"][\"badges\"]\n      });\n    }\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  handleBadgesReceived(dataReceived) {\n    this.setState({\n      badges: dataReceived[\"badges\"]\n    });\n  }\n\n  sendJoinGameMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"join game\",\n      board: \"Histopolio\",\n      // TODO: ter no url\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"]\n    });\n    this.hideDice();\n  }\n\n  handleUpdate(dataReceived) {\n    this.setState({\n      points: dataReceived[\"points\"],\n      position: dataReceived[\"position\"],\n      rank: dataReceived[\"rank\"]\n    });\n  }\n\n  handleContentReceived(dataReceived) {\n    this.setState({\n      content: dataReceived[\"content\"]\n    });\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      question: null\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContentClick() {\n    this.setState({\n      content: \"\"\n    });\n    const dataToSend = {\n      type: \"content viewed\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true\n      });\n      this.reactDice.rollAll();\n    }\n  }\n\n  handleStoreClick() {\n    this.setState({\n      storeOpen: true\n    });\n  }\n\n  handleCloseStoreClick() {\n    this.setState({\n      storeOpen: false\n    });\n  }\n\n  handleBadgePurchased(badgeId, cost) {\n    const newUserBadges = [...this.state.userBadges];\n    newUserBadges.push(badgeId);\n    const newPoints = this.state.points - cost;\n    this.setState({\n      points: newPoints,\n      userBadges: newUserBadges\n    });\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"badge purchased\",\n      userId: user.id,\n      board: \"Histopolio\",\n      // TODO: usar url\n      save: \"Turma1\",\n      // TODO: usar url\n      badgeId: badgeId\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        \"aria-label\": \"breadcrumb\",\n        className: \"m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item active\",\n            \"aria-current\": \"page\",\n            children: \"Histopolio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), this.state.gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.showDice ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n            points: this.state.points,\n            badges: this.state.badges,\n            userBadges: this.state.userBadges,\n            onPurchaseClick: this.handleBadgePurchased,\n            onCloseClick: this.handleCloseStoreClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center page-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Lan\\xE7a o dado!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4\",\n              onClick: this.handleDiceClick,\n              children: /*#__PURE__*/_jsxDEV(ReactDice, {\n                numDice: 1,\n                faceColor: \"#ffF\",\n                dotColor: \"#000000\",\n                outline: true,\n                dieSize: 200,\n                rollTime: this.state.rollTime,\n                rollDone: num => this.rollDoneCallback(num),\n                disableIndividual: true,\n                ref: dice => this.reactDice = dice\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4\",\n              children: [this.state.rank !== 0 && /*#__PURE__*/_jsxDEV(\"h4\", {\n                children: [\"Est\\xE1s em \", this.state.rank, \"\\xBA lugar\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                children: [\"Tens \", this.state.points, \" ponto\", this.state.points !== 1 && \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 330,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-lg btn-primary mt-4\",\n              onClick: this.handleStoreClick,\n              children: \"Comprar trof\\xE9us\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.question ? /*#__PURE__*/_jsxDEV(Question, {\n            question: this.state.question,\n            onAnswerClick: this.handleAnswer,\n            rank: this.state.rank,\n            points: this.state.points\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.content.length > 0 ? /*#__PURE__*/_jsxDEV(Content, {\n              content: this.state.content,\n              onContentClick: this.handleContentClick,\n              points: this.state.points,\n              rank: this.state.rank\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n                points: this.state.points,\n                badges: this.state.badges,\n                userBadges: this.state.userBadges,\n                onPurchaseClick: this.handleBadgePurchased,\n                onCloseClick: this.handleCloseStoreClick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 27\n              }, this) : /*#__PURE__*/_jsxDEV(Wait, {\n                title: \"Espera pela tua vez!\",\n                points: this.state.points,\n                rank: this.state.rank,\n                onStoreClick: this.handleStoreClick\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n          points: this.state.points,\n          badges: this.state.badges,\n          userBadges: this.state.userBadges,\n          onPurchaseClick: this.handleBadgePurchased,\n          onCloseClick: this.handleCloseStoreClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Wait, {\n          title: \"Espera pelo in\\xEDcio do jogo!\",\n          points: this.state.points,\n          rank: this.state.rank,\n          onStoreClick: this.handleStoreClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/Histopólio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","w3cwebsocket","ReactDice","Link","Wait","Question","Store","Play","constructor","props","state","gameStarted","showDice","rollTime","diceRolled","question","content","storeOpen","badges","points","position","rank","userBadges","client","handleDiceClick","bind","handleAnswer","handleContentClick","handleStoreClick","handleCloseStoreClick","handleBadgePurchased","componentDidMount","onopen","console","log","sendIdentificationMessage","loadBadges","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","user","sessionStorage","getItem","dataToSend","type","platform","id","sendToServer","stringify","userId","board","saveFile","send","command","handleGameStatusReceived","handleBadgesReceived","handleTurnReceived","hideDice","handleQuestionReceived","handleUpdate","handleContentReceived","setState","sendJoinGameMessage","name","email","avatar","answerIndex","answer","rollDoneCallback","num","result","Math","random","reactDice","rollAll","badgeId","cost","newUserBadges","push","newPoints","save","render","dice","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport { Link } from \"react-router-dom\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\n\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport Store from \"../components/Store\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleContentClick = this.handleContentClick.bind(this);\n    this.handleStoreClick = this.handleStoreClick.bind(this);\n    this.handleCloseStoreClick = this.handleCloseStoreClick.bind(this);\n    this.handleBadgePurchased = this.handleBadgePurchased.bind(this);\n  }\n\n  state = {\n    gameStarted: false,\n    showDice: false,\n    rollTime: 0,\n    diceRolled: false,\n    question: null,\n    content: \"\",\n    storeOpen: false,\n    badges: [],\n    points: 0,\n    position: 0,\n    rank: 0,\n    userBadges: [],\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.loadBadges();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\", // TODO: ter no url\n      saveFile: \"Turma1.json\", // TODO: retirar\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  loadBadges() {\n    const dataToSend = {\n      type: \"load badges\",\n      board: \"Histopolio\", // TODO: ter no url\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n      case \"badges\":\n        this.handleBadgesReceived(dataReceived);\n        break;\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n      case \"info shown\":\n        this.hideDice();\n        break;\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      case \"update\":\n        this.handleUpdate(dataReceived);\n        break;\n      case \"content\":\n        this.handleContentReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n\n    if (dataReceived[\"playerData\"]) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n        rank: dataReceived[\"playerData\"][\"rank\"],\n        userBadges: dataReceived[\"playerData\"][\"badges\"],\n      });\n    }\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  handleBadgesReceived(dataReceived) {\n    this.setState({\n      badges: dataReceived[\"badges\"],\n    });\n  }\n\n  sendJoinGameMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"join game\",\n      board: \"Histopolio\", // TODO: ter no url\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true,\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleUpdate(dataReceived) {\n    this.setState({\n      points: dataReceived[\"points\"],\n      position: dataReceived[\"position\"],\n      rank: dataReceived[\"rank\"],\n    });\n  }\n\n  handleContentReceived(dataReceived) {\n    this.setState({\n      content: dataReceived[\"content\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ question: null });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContentClick() {\n    this.setState({ content: \"\" });\n\n    const dataToSend = {\n      type: \"content viewed\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true,\n      });\n\n      this.reactDice.rollAll();\n    }\n  }\n\n  handleStoreClick() {\n    this.setState({\n      storeOpen: true,\n    });\n  }\n\n  handleCloseStoreClick() {\n    this.setState({\n      storeOpen: false,\n    });\n  }\n\n  handleBadgePurchased(badgeId, cost) {\n    const newUserBadges = [...this.state.userBadges];\n    newUserBadges.push(badgeId);\n    const newPoints = this.state.points - cost;\n\n    this.setState({\n      points: newPoints,\n      userBadges: newUserBadges,\n    });\n\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"badge purchased\",\n      userId: user.id,\n      board: \"Histopolio\", // TODO: usar url\n      save: \"Turma1\", // TODO: usar url\n      badgeId: badgeId,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return (\n      <div>\n        <nav aria-label=\"breadcrumb\" className=\"m-4\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Histopolio\n            </li>\n          </ol>\n        </nav>\n        {this.state.gameStarted ? (\n          <div>\n            {this.state.showDice ? (\n              <div>\n                {this.state.storeOpen ? (\n                  <Store\n                    points={this.state.points}\n                    badges={this.state.badges}\n                    userBadges={this.state.userBadges}\n                    onPurchaseClick={this.handleBadgePurchased}\n                    onCloseClick={this.handleCloseStoreClick}\n                  />\n                ) : (\n                  <div className=\"text-center page-center\">\n                    <h2>Lança o dado!</h2>\n                    <div className=\"mt-4\" onClick={this.handleDiceClick}>\n                      <ReactDice\n                        numDice={1}\n                        faceColor=\"#ffF\"\n                        dotColor=\"#000000\"\n                        outline={true}\n                        dieSize={200}\n                        rollTime={this.state.rollTime}\n                        rollDone={(num) => this.rollDoneCallback(num)}\n                        disableIndividual={true}\n                        ref={(dice) => (this.reactDice = dice)}\n                      />\n                    </div>\n                    <div className=\"mt-4\">\n                      {this.state.rank !== 0 && (\n                        <h4>Estás em {this.state.rank}º lugar</h4>\n                      )}\n                      <h5>\n                        Tens {this.state.points} ponto\n                        {this.state.points !== 1 && \"s\"}\n                      </h5>\n                    </div>\n                    <button\n                      className=\"btn btn-lg btn-primary mt-4\"\n                      onClick={this.handleStoreClick}\n                    >\n                      Comprar troféus\n                    </button>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div>\n                {this.state.question ? (\n                  <Question\n                    question={this.state.question}\n                    onAnswerClick={this.handleAnswer}\n                    rank={this.state.rank}\n                    points={this.state.points}\n                  />\n                ) : (\n                  <div>\n                    {this.state.content.length > 0 ? (\n                      <Content\n                        content={this.state.content}\n                        onContentClick={this.handleContentClick}\n                        points={this.state.points}\n                        rank={this.state.rank}\n                      />\n                    ) : (\n                      <div>\n                        {this.state.storeOpen ? (\n                          <Store\n                            points={this.state.points}\n                            badges={this.state.badges}\n                            userBadges={this.state.userBadges}\n                            onPurchaseClick={this.handleBadgePurchased}\n                            onCloseClick={this.handleCloseStoreClick}\n                          />\n                        ) : (\n                          <Wait\n                            title=\"Espera pela tua vez!\"\n                            points={this.state.points}\n                            rank={this.state.rank}\n                            onStoreClick={this.handleStoreClick}\n                          />\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        ) : (\n          <div>\n            {this.state.storeOpen ? (\n              <Store\n                points={this.state.points}\n                badges={this.state.badges}\n                userBadges={this.state.userBadges}\n                onPurchaseClick={this.handleBadgePurchased}\n                onCloseClick={this.handleCloseStoreClick}\n              />\n            ) : (\n              <Wait\n                title=\"Espera pelo início do jogo!\"\n                points={this.state.points}\n                rank={this.state.rank}\n                onStoreClick={this.handleStoreClick}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}