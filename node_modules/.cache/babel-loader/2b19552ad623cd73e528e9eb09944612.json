{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { w3cwebsocket } from 'websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new w3cwebsocket('ws://localhost:8080');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showQuestion: false,\n      question: \"\",\n      answers: []\n    };\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n      this.sendIdentificationMessage();\n    };\n\n    client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: 'identification',\n      id: 'react'\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived['type'];\n\n    switch (command) {\n      case 'question':\n        this.setState({\n          question: dataReceived['question'],\n          answers: dataReceived['answers'],\n          showQuestion: true\n        });\n        break;\n\n      default:\n        console.log('Unknown message: ' + dataReceived);\n    }\n  }\n\n  sendAnswer(answer) {\n    this.setState({\n      showQuestion: false\n    });\n    const dataToSend = {\n      type: 'answer',\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.showQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), this.state.answers.map((answer, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.sendAnswer(i + 1);\n          },\n          children: answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 52\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Wait for your turn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/andre/Desktop/HistopÃ³lio/histopolio/histopolio-app/client/src/App.js"],"names":["Component","w3cwebsocket","client","App","constructor","state","showQuestion","question","answers","componentDidMount","onopen","console","log","sendIdentificationMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","dataToSend","type","id","sendToServer","stringify","send","command","setState","sendAnswer","answer","render","map","i"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,WAA7B;;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,CAAiB,qBAAjB,CAAf;;AAEA,MAAME,GAAN,SAAkBH,SAAlB,CAA4B;AAC1BI,EAAAA,WAAW,GAAG;AACV;AADU,SAIdC,KAJc,GAIN;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,QAAQ,EAAE,EAFJ;AAGNC,MAAAA,OAAO,EAAE;AAHH,KAJM;AAEb;;AAQDC,EAAAA,iBAAiB,GAAG;AAClBP,IAAAA,MAAM,CAACQ,MAAP,GAAgB,MAAM;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAEA,WAAKC,yBAAL;AACD,KAJD;;AAMAX,IAAAA,MAAM,CAACY,SAAP,GAAoBC,OAAD,IAAa;AAC9BJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAO,CAACC,IAApB;AACA,YAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,IAAnB,CAArB;AAEA,WAAKI,mBAAL,CAAyBH,YAAzB;AACD,KALD;AAMD;;AAEDJ,EAAAA,yBAAyB,GAAG;AAC1B,UAAMQ,UAAU,GAAG;AACjBC,MAAAA,IAAI,EAAE,gBADW;AAEjBC,MAAAA,EAAE,EAAE;AAFa,KAAnB;AAKA,SAAKC,YAAL,CAAkBN,IAAI,CAACO,SAAL,CAAeJ,UAAf,CAAlB;AACD;;AAEDG,EAAAA,YAAY,CAACT,OAAD,EAAU;AACpBb,IAAAA,MAAM,CAACwB,IAAP,CAAYX,OAAZ;AACD;;AAEDK,EAAAA,mBAAmB,CAACH,YAAD,EAAe;AAChC,UAAMU,OAAO,GAAGV,YAAY,CAAC,MAAD,CAA5B;;AAEA,YAAOU,OAAP;AACE,WAAK,UAAL;AACE,aAAKC,QAAL,CAAc;AACZrB,UAAAA,QAAQ,EAAEU,YAAY,CAAC,UAAD,CADV;AAEZT,UAAAA,OAAO,EAAES,YAAY,CAAC,SAAD,CAFT;AAGZX,UAAAA,YAAY,EAAE;AAHF,SAAd;AAKA;;AACF;AACEK,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBK,YAAlC;AATJ;AAWD;;AAEDY,EAAAA,UAAU,CAACC,MAAD,EAAS;AACjB,SAAKF,QAAL,CAAc;AAAEtB,MAAAA,YAAY,EAAE;AAAhB,KAAd;AAEA,UAAMe,UAAU,GAAG;AACjBC,MAAAA,IAAI,EAAE,QADW;AAEjBQ,MAAAA,MAAM,EAAEA;AAFS,KAAnB;AAKA,SAAKN,YAAL,CAAkBN,IAAI,CAACO,SAAL,CAAeJ,UAAf,CAAlB;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACG,KAAK1B,KAAL,CAAWC,YAAX,gBACC;AAAA,gCACE;AAAA,oBAAI,KAAKD,KAAL,CAAWE;AAAf;AAAA;AAAA;AAAA;AAAA,gBADF,EAEG,KAAKF,KAAL,CAAWG,OAAX,CAAmBwB,GAAnB,CAAuB,CAACF,MAAD,EAASG,CAAT,kBAAe;AAAQ,UAAA,OAAO,EAAE,MAAM;AAAC,iBAAKJ,UAAL,CAAgBI,CAAC,GAAC,CAAlB;AAAqB,WAA7C;AAAA,oBAAgDH;AAAhD;AAAA;AAAA;AAAA;AAAA,gBAAtC,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA/EyB;;AAkF5B,eAAe3B,GAAf","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport { w3cwebsocket } from 'websocket';\n\nconst client = new w3cwebsocket('ws://localhost:8080');\n\nclass App extends Component {\n  constructor() {\n      super();\n  }\n\n  state = {\n    showQuestion: false,\n    question: \"\",\n    answers: []\n  };\n  \n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected')\n\n      this.sendIdentificationMessage()\n    }\n\n    client.onmessage = (message) => {\n      console.log(message.data)\n      const dataReceived = JSON.parse(message.data)\n\n      this.processDataReceived(dataReceived)\n    }\n  }\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: 'identification',\n      id: 'react'\n    }\n\n    this.sendToServer(JSON.stringify(dataToSend))\n  }\n\n  sendToServer(message) {\n    client.send(message)\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived['type'];\n\n    switch(command) {\n      case 'question':\n        this.setState({\n          question: dataReceived['question'],\n          answers: dataReceived['answers'],\n          showQuestion: true\n        });\n        break;\n      default:\n        console.log('Unknown message: ' + dataReceived);\n    }\n  }\n\n  sendAnswer(answer) {\n    this.setState({ showQuestion: false });\n\n    const dataToSend = {\n      type: 'answer',\n      answer: answer\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.showQuestion ? (\n          <div>\n            <p>{this.state.question}</p>\n            {this.state.answers.map((answer, i) => <button onClick={() => {this.sendAnswer(i+1)}}>{answer}</button>)}\n          </div>\n        ) : (\n          <p>Wait for your turn</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}