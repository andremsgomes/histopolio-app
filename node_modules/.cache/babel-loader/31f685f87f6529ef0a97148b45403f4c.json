{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/Components/MainContent.jsx\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Play from \"./../pages/Play\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MainContent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showQuestion: false,\n      question: \"\",\n      answers: []\n    };\n    this.handleAnswer = this.handleAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.client.readyState != 1) {\n      this.props.client.onopen = () => {\n        console.log(\"WebSocket Client Connected\");\n        this.sendIdentificationMessage();\n      };\n\n      this.props.client.onmessage = message => {\n        console.log(message.data);\n        const dataReceived = JSON.parse(message.data);\n        this.processDataReceived(dataReceived);\n      };\n    }\n  }\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: \"identification\",\n      id: \"react\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.props.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"question\"],\n      answers: dataReceived[\"answers\"],\n      showQuestion: true\n    });\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      showQuestion: false\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"play\",\n          element: /*#__PURE__*/_jsxDEV(Play, {\n            gameStarted: this.state.gameStarted,\n            showQuestion: this.state.showQuestion,\n            question: this.state.question,\n            answers: this.state.answers,\n            onAnswer: this.handleAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MainContent;","map":{"version":3,"sources":["/home/andre/Desktop/HistopÃ³lio/histopolio/histopolio-app/client/src/app/Components/MainContent.jsx"],"names":["React","Component","BrowserRouter","Route","Routes","Play","MainContent","constructor","props","state","gameStarted","showQuestion","question","answers","handleAnswer","bind","componentDidMount","client","readyState","onopen","console","log","sendIdentificationMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","dataToSend","type","id","sendToServer","stringify","send","command","handleQuestionReceived","setState","answerIndex","answer","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\n\nimport Play from \"./../pages/Play\";\n\nclass MainContent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAnswer = this.handleAnswer.bind(this);\n  }\n\n  state = {\n    gameStarted: false,\n    showQuestion: false,\n    question: \"\",\n    answers: [],\n  };\n\n  componentDidMount() {\n    if (this.props.client.readyState != 1) {\n      this.props.client.onopen = () => {\n        console.log(\"WebSocket Client Connected\");\n\n        this.sendIdentificationMessage();\n      };\n\n      this.props.client.onmessage = (message) => {\n        console.log(message.data);\n        const dataReceived = JSON.parse(message.data);\n\n        this.processDataReceived(dataReceived);\n      };\n    }\n  }\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: \"identification\",\n      id: \"react\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.props.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"question\"],\n      answers: dataReceived[\"answers\"],\n      showQuestion: true,\n    });\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ showQuestion: false });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Routes>\n          <Route\n            path=\"play\"\n            element={\n              <Play\n                gameStarted={this.state.gameStarted}\n                showQuestion={this.state.showQuestion}\n                question={this.state.question}\n                answers={this.state.answers}\n                onAnswer={this.handleAnswer}\n              />\n            }\n          />\n        </Routes>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default MainContent;\n"]},"metadata":{},"sourceType":"module"}