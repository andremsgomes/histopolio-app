{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport { Link } from \"react-router-dom\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport Store from \"../components/Store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n      question: null,\n      content: \"\",\n      storeOpen: false,\n      badges: [],\n      points: 0,\n      position: 0,\n      rank: 0,\n      userBadges: []\n    };\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleContentClick = this.handleContentClick.bind(this);\n    this.handleStoreClick = this.handleStoreClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.loadBadges();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\",\n      // TODO: ter no url\n      saveFile: \"Turma1.json\" // TODO: retirar\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  loadBadges() {\n    const dataToSend = {\n      type: \"load badges\",\n      board: \"Histopolio\" // TODO: ter no url\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n\n      case \"badges\":\n        this.handleBadgesReceived(dataReceived);\n        break;\n\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n\n      case \"info shown\":\n        this.hideDice();\n        break;\n\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      case \"update\":\n        this.handleUpdate(dataReceived);\n        break;\n\n      case \"content\":\n        this.handleContentReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n\n    if (dataReceived[\"playerData\"]) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n        rank: dataReceived[\"playerData\"][\"rank\"],\n        userBadges: dataReceived[\"playerData\"][\"badges\"]\n      });\n    }\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  handleBadgesReceived(dataReceived) {\n    this.setState({\n      badges: dataReceived[\"badges\"]\n    });\n  }\n\n  sendJoinGameMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"join game\",\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"]\n    });\n    this.hideDice();\n  }\n\n  handleUpdate(dataReceived) {\n    this.setState({\n      points: dataReceived[\"points\"],\n      position: dataReceived[\"position\"],\n      rank: dataReceived[\"rank\"]\n    });\n  }\n\n  handleContentReceived(dataReceived) {\n    this.setState({\n      content: dataReceived[\"content\"]\n    });\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      question: null\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContentClick() {\n    this.setState({\n      content: \"\"\n    });\n    const dataToSend = {\n      type: \"content viewed\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true\n      });\n      this.reactDice.rollAll();\n    }\n  }\n\n  handleStoreClick() {\n    this.setState({\n      storeOpen: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        \"aria-label\": \"breadcrumb\",\n        className: \"m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item active\",\n            \"aria-current\": \"page\",\n            children: \"Histopolio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), this.state.gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.showDice ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Lan\\xE7a o dado!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            onClick: this.handleDiceClick,\n            children: /*#__PURE__*/_jsxDEV(ReactDice, {\n              numDice: 1,\n              faceColor: \"#ffF\",\n              dotColor: \"#000000\",\n              outline: true,\n              dieSize: 200,\n              rollTime: this.state.rollTime,\n              rollDone: num => this.rollDoneCallback(num),\n              disableIndividual: true,\n              ref: dice => this.reactDice = dice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.question ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Question, {\n              question: this.state.question,\n              onAnswerClick: this.handleAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: this.state.content.length > 0 ? /*#__PURE__*/_jsxDEV(\"a\", {\n              href: this.state.content,\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary btn-lg mt-4\",\n                onClick: this.handleContentClick,\n                children: \"Ver conte\\xFAdo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Espera pela tua vez!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rank: \", this.state.rank]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n          badges: this.state.badges\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Wait, {\n          points: this.state.points,\n          rank: this.state.rank,\n          onStoreClick: this.handleStoreClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/Histopólio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","w3cwebsocket","ReactDice","Link","Wait","Question","Store","Play","constructor","props","state","gameStarted","showDice","rollTime","diceRolled","question","content","storeOpen","badges","points","position","rank","userBadges","client","handleDiceClick","bind","handleAnswer","handleContentClick","handleStoreClick","componentDidMount","onopen","console","log","sendIdentificationMessage","loadBadges","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","user","sessionStorage","getItem","dataToSend","type","platform","id","sendToServer","stringify","userId","board","saveFile","send","command","handleGameStatusReceived","handleBadgesReceived","handleTurnReceived","hideDice","handleQuestionReceived","handleUpdate","handleContentReceived","setState","sendJoinGameMessage","name","email","avatar","answerIndex","answer","rollDoneCallback","num","result","Math","random","reactDice","rollAll","render","dice","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport { Link } from \"react-router-dom\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\n\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport Store from \"../components/Store\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleContentClick = this.handleContentClick.bind(this);\n    this.handleStoreClick = this.handleStoreClick.bind(this);\n  }\n\n  state = {\n    gameStarted: false,\n    showDice: false,\n    rollTime: 0,\n    diceRolled: false,\n    question: null,\n    content: \"\",\n    storeOpen: false,\n    badges: [],\n    points: 0,\n    position: 0,\n    rank: 0,\n    userBadges: [],\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.loadBadges();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\", // TODO: ter no url\n      saveFile: \"Turma1.json\", // TODO: retirar\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  loadBadges() {\n    const dataToSend = {\n      type: \"load badges\",\n      board: \"Histopolio\", // TODO: ter no url\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n      case \"badges\":\n        this.handleBadgesReceived(dataReceived);\n        break;\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n      case \"info shown\":\n        this.hideDice();\n        break;\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      case \"update\":\n        this.handleUpdate(dataReceived);\n        break;\n      case \"content\":\n        this.handleContentReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n\n    if (dataReceived[\"playerData\"]) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n        rank: dataReceived[\"playerData\"][\"rank\"],\n        userBadges: dataReceived[\"playerData\"][\"badges\"],\n      });\n    }\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  handleBadgesReceived(dataReceived) {\n    this.setState({\n      badges: dataReceived[\"badges\"],\n    });\n  }\n\n  sendJoinGameMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"join game\",\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true,\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleUpdate(dataReceived) {\n    this.setState({\n      points: dataReceived[\"points\"],\n      position: dataReceived[\"position\"],\n      rank: dataReceived[\"rank\"],\n    });\n  }\n\n  handleContentReceived(dataReceived) {\n    this.setState({\n      content: dataReceived[\"content\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ question: null });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContentClick() {\n    this.setState({ content: \"\" });\n\n    const dataToSend = {\n      type: \"content viewed\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true,\n      });\n\n      this.reactDice.rollAll();\n    }\n  }\n\n  handleStoreClick() {\n    this.setState({\n      storeOpen: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <nav aria-label=\"breadcrumb\" className=\"m-4\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Histopolio\n            </li>\n          </ol>\n        </nav>\n        {this.state.gameStarted ? (\n          <div>\n            {this.state.showDice ? (\n              <div className=\"text-center\">\n                <h4 className=\"mb-4\">Lança o dado!</h4>\n                <div className=\"mt-4\" onClick={this.handleDiceClick}>\n                  <ReactDice\n                    numDice={1}\n                    faceColor=\"#ffF\"\n                    dotColor=\"#000000\"\n                    outline={true}\n                    dieSize={200}\n                    rollTime={this.state.rollTime}\n                    rollDone={(num) => this.rollDoneCallback(num)}\n                    disableIndividual={true}\n                    ref={(dice) => (this.reactDice = dice)}\n                  />\n                </div>\n              </div>\n            ) : (\n              <div>\n                {this.state.question ? (\n                  <div>\n                    <Question\n                      question={this.state.question}\n                      onAnswerClick={this.handleAnswer}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"text-center\">\n                    {this.state.content.length > 0 ? (\n                      <a\n                        href={this.state.content}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <button\n                          className=\"btn btn-primary btn-lg mt-4\"\n                          onClick={this.handleContentClick}\n                        >\n                          Ver conteúdo\n                        </button>\n                      </a>\n                    ) : (\n                      <h2>Espera pela tua vez!</h2>\n                    )}\n                  </div>\n                )}\n              </div>\n            )}\n            <p>Rank: {this.state.rank}</p>\n          </div>\n        ) : (\n          <div>\n            {this.state.storeOpen ? (\n              <Store badges={this.state.badges} />\n            ) : (\n              <Wait\n                points={this.state.points}\n                rank={this.state.rank}\n                onStoreClick={this.handleStoreClick}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}