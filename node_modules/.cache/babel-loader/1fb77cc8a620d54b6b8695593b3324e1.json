{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\nimport AuthContext from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n      showQuestion: false,\n      question: \"\",\n      answers: []\n    };\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const dataToSend = {\n      type: \"game status\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n\n      case \"info shown\":\n        this.hideDice();\n        break;\n\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  sendJoinGameMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"join game\",\n      id: user.id,\n      name: user.name\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"][\"question\"],\n      answers: dataReceived[\"questionData\"][\"answers\"],\n      showQuestion: true\n    });\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      showQuestion: false\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    this.setState({\n      diceRolled: true\n    });\n    const dataToSend = {\n      type: \"dice result\",\n      result: num\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    this.setState({\n      rollTime: 2\n    });\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.showDice ? /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: this.handleDiceClick,\n          children: /*#__PURE__*/_jsxDEV(ReactDice, {\n            numDice: 1,\n            rollTime: this.state.rollTime,\n            rollDone: num => this.rollDoneCallback(num),\n            disableIndividual: this.state.diceRolled,\n            ref: dice => this.reactDice = dice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.showQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: this.state.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 19\n            }, this), this.state.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary btn-lg\",\n              onClick: () => {\n                this.handleAnswer(index);\n              },\n              children: answer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Espera pela tua vez!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Espera pelo in\\xEDcio do jogo!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nPlay.contextType = AuthContext;\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/Histop√≥lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","w3cwebsocket","ReactDice","AuthContext","Play","constructor","props","state","gameStarted","showDice","rollTime","diceRolled","showQuestion","question","answers","client","componentDidMount","onopen","console","log","sendIdentificationMessage","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","user","context","dataToSend","type","platform","id","sendToServer","stringify","send","command","handleGameStatusReceived","handleTurnReceived","hideDice","handleQuestionReceived","setState","sendJoinGameMessage","name","handleAnswer","answerIndex","answer","rollDoneCallback","num","result","handleDiceClick","render","dice","reactDice","map","index","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\n\nimport AuthContext from \"../context/AuthContext\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n  }\n\n  static contextType = AuthContext;\n\n  state = {\n    gameStarted: false,\n    showDice: false,\n    rollTime: 0,\n    diceRolled: false,\n    showQuestion: false,\n    question: \"\",\n    answers: [],\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const dataToSend = {\n      type: \"game status\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n      case \"info shown\":\n        this.hideDice();\n        break;\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  sendJoinGameMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"join game\",\n      id: user.id,\n      name: user.name,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true,\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"][\"question\"],\n      answers: dataReceived[\"questionData\"][\"answers\"],\n      showQuestion: true,\n    });\n\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ showQuestion: false });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    this.setState({\n      diceRolled: true,\n    });\n\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    this.setState({\n      rollTime: 2,\n    });\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return (\n        <div>\n          {this.state.showDice ? (\n            <div onClick={this.handleDiceClick}>\n              <ReactDice\n                numDice={1}\n                rollTime={this.state.rollTime}\n                rollDone={(num) => this.rollDoneCallback(num)}\n                disableIndividual={this.state.diceRolled}\n                ref={(dice) => (this.reactDice = dice)}\n              />\n            </div>\n          ) : (\n            <div>\n              {this.state.showQuestion ? (\n                <div>\n                  <h1>{this.state.question}</h1>\n                  {this.state.answers.map((answer, index) => (\n                    <button\n                      className=\"btn btn-secondary btn-lg\"\n                      onClick={() => {\n                        this.handleAnswer(index);\n                      }}\n                    >\n                      {answer}\n                    </button>\n                  ))}\n                </div>\n              ) : (\n                <h2>Espera pela tua vez!</h2>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h2>Espera pelo in√≠cio do jogo!</h2>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}