{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/Components/MainContent.jsx\";\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Play from './../pages/Play';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MainContent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showQuestion: false,\n      question: \"\",\n      answers: []\n    };\n    this.handleAnswer = this.handleAnswer.bind(this);\n\n    this.props.client.onopen = () => {\n      console.log('WebSocket Client Connected');\n      this.sendIdentificationMessage();\n    };\n\n    this.props.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  componentDidMount() {}\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: 'identification',\n      id: 'react'\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.props.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived['type'];\n\n    switch (command) {\n      case 'question':\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      default:\n        console.log('Unknown message: ' + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived['question'],\n      answers: dataReceived['answers'],\n      showQuestion: true\n    });\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      showQuestion: false\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: 'answer',\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"play\",\n          element: /*#__PURE__*/_jsxDEV(Play, {\n            gameStarted: this.state.gameStarted,\n            showQuestion: this.state.showQuestion,\n            question: this.state.question,\n            answers: this.state.answers,\n            onAnswer: this.handleAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MainContent;","map":{"version":3,"sources":["/home/andre/Desktop/HistopÃ³lio/histopolio/histopolio-app/client/src/app/Components/MainContent.jsx"],"names":["React","Component","BrowserRouter","Route","Routes","Play","MainContent","constructor","props","state","gameStarted","showQuestion","question","answers","handleAnswer","bind","client","onopen","console","log","sendIdentificationMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","componentDidMount","dataToSend","type","id","sendToServer","stringify","send","command","handleQuestionReceived","setState","answerIndex","answer","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\n\nimport Play from './../pages/Play';\n\nclass MainContent extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleAnswer = this.handleAnswer.bind(this);\n\n        this.props.client.onopen = () => {\n            console.log('WebSocket Client Connected')\n        \n            this.sendIdentificationMessage()\n            }\n        \n            this.props.client.onmessage = (message) => {\n            console.log(message.data)\n            const dataReceived = JSON.parse(message.data)\n        \n            this.processDataReceived(dataReceived)\n        }\n    }\n\n    state = {\n        gameStarted: false,\n        showQuestion: false,\n        question: \"\",\n        answers: []\n      };\n      \n      componentDidMount() {\n        \n      }\n    \n      sendIdentificationMessage() {\n        const dataToSend = {\n          type: 'identification',\n          id: 'react'\n        }\n    \n        this.sendToServer(JSON.stringify(dataToSend))\n      }\n    \n      sendToServer(message) {\n        this.props.client.send(message)\n      }\n    \n      processDataReceived(dataReceived) {\n        const command = dataReceived['type'];\n    \n        switch(command) {\n          case 'question':\n            this.handleQuestionReceived(dataReceived)\n            break;\n          default:\n            console.log('Unknown message: ' + dataReceived);\n        }\n      }\n    \n      handleQuestionReceived(dataReceived) {\n        this.setState({\n          question: dataReceived['question'],\n          answers: dataReceived['answers'],\n          showQuestion: true\n        });\n      }\n    \n      handleAnswer(answerIndex) {\n        this.setState({ showQuestion: false });\n    \n        const answer = answerIndex + 1;\n    \n        const dataToSend = {\n          type: 'answer',\n          answer: answer\n        };\n    \n        this.sendToServer(JSON.stringify(dataToSend));\n      }\n\n    render() {\n        return (\n            <BrowserRouter>\n                <Routes>\n                    <Route path=\"play\" element={<Play gameStarted={this.state.gameStarted} showQuestion={this.state.showQuestion} question={this.state.question} answers={this.state.answers} onAnswer={this.handleAnswer} /> } />\n                </Routes>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default MainContent;"]},"metadata":{},"sourceType":"module"}