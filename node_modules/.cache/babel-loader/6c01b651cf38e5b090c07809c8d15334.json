{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component, useContext } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport AuthContext from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showQuestion: false,\n      question: \"\",\n      answers: []\n    };\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const dataToSend = {\n      type: \"game status\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"question\"],\n      answers: dataReceived[\"answers\"],\n      showQuestion: true\n    });\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  sendJoinGameMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"join game\",\n      id: user.id,\n      name: user.name\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      showQuestion: false\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.showQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: this.state.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), this.state.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-secondary btn-lg\",\n            onClick: () => {\n              this.handleAnswer(index);\n            },\n            children: answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Espera pela tua vez!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Espera pelo in\\xEDcio do jogo!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nPlay.contextType = AuthContext;\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/HistopÃ³lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","useContext","w3cwebsocket","AuthContext","Play","constructor","props","state","gameStarted","showQuestion","question","answers","client","componentDidMount","onopen","console","log","sendIdentificationMessage","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","user","context","dataToSend","type","platform","id","sendToServer","stringify","send","command","handleQuestionReceived","handleGameStatusReceived","setState","sendJoinGameMessage","name","handleAnswer","answerIndex","answer","render","map","index","contextType"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport AuthContext from \"../context/AuthContext\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n  }\n\n  static contextType = AuthContext;\n\n  state = {\n    gameStarted: false,\n    showQuestion: false,\n    question: \"\",\n    answers: [],\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const dataToSend = {\n      type: \"game status\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"question\"],\n      answers: dataReceived[\"answers\"],\n      showQuestion: true,\n    });\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  sendJoinGameMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"join game\",\n      id: user.id,\n      name: user.name\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ showQuestion: false });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return (\n        <div>\n          {this.state.showQuestion ? (\n            <div>\n              <h1>{this.state.question}</h1>\n              {this.state.answers.map((answer, index) => (\n                <button\n                  className=\"btn btn-secondary btn-lg\"\n                  onClick={() => {\n                    this.handleAnswer(index);\n                  }}\n                >\n                  {answer}\n                </button>\n              ))}\n            </div>\n          ) : (\n            <h2>Espera pela tua vez!</h2>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h2>Espera pelo inÃ­cio do jogo!</h2>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}