{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\nimport AuthContext from \"../context/AuthContext\";\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n      question: null,\n      points: 0,\n      position: 0\n    };\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\",\n      // TODO: ter no url\n      saveFile: \"Turma1.json\" // TODO: retirar\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n\n      case \"info shown\":\n        this.hideDice();\n        break;\n\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n\n    if (this.state.gameStarted) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"]\n      });\n      this.sendJoinGameMessage();\n    } else {\n      this.setState({\n        question: null,\n        showDice: false\n      });\n    }\n  }\n\n  sendJoinGameMessage() {\n    const {\n      user\n    } = this.context;\n    const dataToSend = {\n      type: \"join game\",\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"]\n    });\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      question: null\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true\n      });\n      this.reactDice.rollAll();\n    }\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.showDice ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mb-4\",\n            children: \"Lan\\xE7a o dado!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            onClick: this.handleDiceClick,\n            children: /*#__PURE__*/_jsxDEV(ReactDice, {\n              numDice: 1,\n              faceColor: \"#ffF\",\n              dotColor: \"#000000\",\n              outline: true,\n              dieSize: 200,\n              rollTime: this.state.rollTime,\n              rollDone: num => this.rollDoneCallback(num),\n              disableIndividual: true,\n              ref: dice => this.reactDice = dice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.question ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Question, {\n              question: this.state.question,\n              onAnswerClick: this.handleAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Espera pela tua vez!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Wait, {\n        points: this.state.points\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}\n\nPlay.contextType = AuthContext;\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/Histop√≥lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","w3cwebsocket","ReactDice","AuthContext","Wait","Question","Play","constructor","props","state","gameStarted","showDice","rollTime","diceRolled","question","points","position","client","handleDiceClick","bind","handleAnswer","componentDidMount","onopen","console","log","sendIdentificationMessage","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","user","context","dataToSend","type","platform","id","sendToServer","stringify","userId","board","saveFile","send","command","handleGameStatusReceived","handleTurnReceived","hideDice","handleQuestionReceived","setState","sendJoinGameMessage","name","email","avatar","answerIndex","answer","rollDoneCallback","num","result","Math","random","reactDice","rollAll","render","dice","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\n\nimport AuthContext from \"../context/AuthContext\";\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n  }\n\n  static contextType = AuthContext;\n\n  state = {\n    gameStarted: false,\n    showDice: false,\n    rollTime: 0,\n    diceRolled: false,\n    question: null,\n    points: 0,\n    position: 0,\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\", // TODO: ter no url\n      saveFile: \"Turma1.json\", // TODO: retirar\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n      case \"info shown\":\n        this.hideDice();\n        break;\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n\n    if (this.state.gameStarted) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n      });\n\n      this.sendJoinGameMessage();\n    } else {\n      this.setState({\n        question: null,\n        showDice: false,\n      });\n    }\n  }\n\n  sendJoinGameMessage() {\n    const { user } = this.context;\n\n    const dataToSend = {\n      type: \"join game\",\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      showDice: true,\n    });\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"questionData\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ question: null });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true,\n      });\n\n      this.reactDice.rollAll();\n    }\n  }\n\n  render() {\n    if (this.state.gameStarted) {\n      return (\n        <div>\n          {this.state.showDice ? (\n            <div className=\"text-center\">\n              <h4 className=\"mb-4\">Lan√ßa o dado!</h4>\n              <div className=\"mt-4\" onClick={this.handleDiceClick}>\n                <ReactDice\n                  numDice={1}\n                  faceColor=\"#ffF\"\n                  dotColor=\"#000000\"\n                  outline={true}\n                  dieSize={200}\n                  rollTime={this.state.rollTime}\n                  rollDone={(num) => this.rollDoneCallback(num)}\n                  disableIndividual={true}\n                  ref={(dice) => (this.reactDice = dice)}\n                />\n              </div>\n            </div>\n          ) : (\n            <div>\n              {this.state.question ? (\n                <div>\n                  <Question\n                    question={this.state.question}\n                    onAnswerClick={this.handleAnswer}\n                  />\n                </div>\n              ) : (\n                <h2>Espera pela tua vez!</h2>\n              )}\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return <Wait points={this.state.points} />;\n    }\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}