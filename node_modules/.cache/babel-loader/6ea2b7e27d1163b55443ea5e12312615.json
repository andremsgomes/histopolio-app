{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport { Link } from \"react-router-dom\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport Store from \"../components/Store\";\nimport Content from \"../components/Content\";\nimport Continue from \"../components/Continue\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      playerTurn: false,\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n      question: null,\n      content: \"\",\n      cardInfo: false,\n      storeOpen: false,\n      finishTurn: false,\n      finishTurnInfo: \"\",\n      badges: [],\n      points: 0,\n      position: 0,\n      rank: 0,\n      userBadges: []\n    };\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleContentClick = this.handleContentClick.bind(this);\n    this.handleInfoShownReceived = this.handleInfoShownReceived.bind(this);\n    this.handleStoreClick = this.handleStoreClick.bind(this);\n    this.handleCloseStoreClick = this.handleCloseStoreClick.bind(this);\n    this.handleBadgePurchased = this.handleBadgePurchased.bind(this);\n    this.handleFinishTurnReceived = this.handleFinishTurnReceived.bind(this);\n    this.handleContinueClick = this.handleContinueClick.bind(this);\n    this.handleFinishClick = this.handleFinishClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.loadBadges();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\",\n      // TODO: ter no url\n      saveFile: \"Turma1.json\" // TODO: retirar\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  loadBadges() {\n    const dataToSend = {\n      type: \"load badges\",\n      board: \"Histopolio\" // TODO: ter no url\n\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n\n      case \"badges\":\n        this.handleBadgesReceived(dataReceived);\n        break;\n\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n\n      case \"info shown\":\n        this.handleInfoShownReceived();\n        break;\n\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      case \"update\":\n        this.handleUpdate(dataReceived);\n        break;\n\n      case \"content\":\n        this.handleContentReceived(dataReceived);\n        break;\n\n      case \"finish turn\":\n        this.handleFinishTurnReceived(dataReceived);\n        break;\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n\n    if (dataReceived[\"playerData\"]) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n        rank: dataReceived[\"playerData\"][\"rank\"],\n        userBadges: dataReceived[\"playerData\"][\"badges\"]\n      });\n    }\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  handleBadgesReceived(dataReceived) {\n    this.setState({\n      badges: dataReceived[\"badges\"]\n    });\n  }\n\n  sendJoinGameMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"join game\",\n      board: \"Histopolio\",\n      // TODO: ter no url\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      playerTurn: true,\n      showDice: true\n    });\n  }\n\n  handleInfoShownReceived() {\n    this.setState({\n      cardInfo: true\n    });\n    this.hideDice();\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      playerTurn: true,\n      question: dataReceived[\"questionData\"]\n    });\n    this.hideDice();\n  }\n\n  handleUpdate(dataReceived) {\n    this.setState({\n      points: dataReceived[\"points\"],\n      position: dataReceived[\"position\"],\n      rank: dataReceived[\"rank\"]\n    });\n  }\n\n  handleContentReceived(dataReceived) {\n    this.setState({\n      content: dataReceived[\"content\"]\n    });\n    this.hideDice();\n  }\n\n  handleFinishTurnReceived(dataReceived) {\n    this.setState({\n      finishTurn: true,\n      finishTurnInfo: dataReceived[\"info\"]\n    });\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      question: null\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContentClick() {\n    this.setState({\n      content: \"\"\n    });\n    const dataToSend = {\n      type: \"content viewed\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true\n      });\n      this.reactDice.rollAll();\n    }\n  }\n\n  handleStoreClick() {\n    this.setState({\n      storeOpen: true\n    });\n  }\n\n  handleCloseStoreClick() {\n    this.setState({\n      storeOpen: false\n    });\n  }\n\n  handleBadgePurchased(badgeId, cost) {\n    const newUserBadges = [...this.state.userBadges];\n    newUserBadges.push(badgeId);\n    const newPoints = this.state.points - cost;\n    this.setState({\n      points: newPoints,\n      userBadges: newUserBadges\n    });\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n    const dataToSend = {\n      type: \"badge purchased\",\n      userId: user.id,\n      board: \"Histopolio\",\n      // TODO: usar url\n      save: \"Turma1\",\n      // TODO: usar url\n      badgeId: badgeId\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContinueClick() {\n    this.setState({\n      cardInfo: false\n    });\n    const dataToSend = {\n      type: \"continue\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleFinishClick() {\n    this.setState({\n      finishTurn: false,\n      finishTurnInfo: \"\",\n      playerTurn: false\n    });\n    const dataToSend = {\n      type: \"next player\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        \"aria-label\": \"breadcrumb\",\n        className: \"m-4\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"breadcrumb\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"breadcrumb-item active\",\n            \"aria-current\": \"page\",\n            children: \"Histopolio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), this.state.gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.playerTurn ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.showDice ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n              points: this.state.points,\n              badges: this.state.badges,\n              userBadges: this.state.userBadges,\n              onPurchaseClick: this.handleBadgePurchased,\n              onCloseClick: this.handleCloseStoreClick\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center page-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Lan\\xE7a o dado!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-4\",\n                onClick: this.handleDiceClick,\n                children: /*#__PURE__*/_jsxDEV(ReactDice, {\n                  numDice: 1,\n                  faceColor: \"#ffF\",\n                  dotColor: \"#000000\",\n                  outline: true,\n                  dieSize: 200,\n                  rollTime: this.state.rollTime,\n                  rollDone: num => this.rollDoneCallback(num),\n                  disableIndividual: true,\n                  ref: dice => this.reactDice = dice\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-4\",\n                children: [this.state.rank !== 0 && /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: [\"Est\\xE1s em \", this.state.rank, \"\\xBA lugar\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: [\"Tens \", this.state.points, \" ponto\", this.state.points !== 1 && \"s\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-lg btn-primary mt-4\",\n                onClick: this.handleStoreClick,\n                disabled: this.state.diceRolled,\n                children: \"Comprar trof\\xE9us\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.state.question ? /*#__PURE__*/_jsxDEV(Question, {\n              question: this.state.question,\n              onAnswerClick: this.handleAnswer,\n              rank: this.state.rank,\n              points: this.state.points\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.content.length > 0 ? /*#__PURE__*/_jsxDEV(Content, {\n                content: this.state.content,\n                onContentClick: this.handleContentClick,\n                points: this.state.points,\n                rank: this.state.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 27\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: this.state.finishTurn ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n                    points: this.state.points,\n                    badges: this.state.badges,\n                    userBadges: this.state.userBadges,\n                    onPurchaseClick: this.handleBadgePurchased,\n                    onCloseClick: this.handleCloseStoreClick\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 428,\n                    columnNumber: 35\n                  }, this) : /*#__PURE__*/_jsxDEV(Continue, {\n                    info: this.state.finishTurnInfo,\n                    onContinueClick: this.handleFinishClick,\n                    points: this.state.points,\n                    rank: this.state.rank,\n                    storeButton: true,\n                    onStoreClick: this.handleStoreClick\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 436,\n                    columnNumber: 35\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 426,\n                  columnNumber: 31\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: this.state.cardInfo ? /*#__PURE__*/_jsxDEV(Continue, {\n                    info: this.state.finishTurnInfo,\n                    onContinueClick: this.handleContinueClick,\n                    points: this.state.points,\n                    rank: this.state.rank,\n                    storeButton: false,\n                    onStoreClick: this.handleStoreClick\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 35\n                  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n                      points: this.state.points,\n                      badges: this.state.badges,\n                      userBadges: this.state.userBadges,\n                      onPurchaseClick: this.handleBadgePurchased,\n                      onCloseClick: this.handleCloseStoreClick\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 460,\n                      columnNumber: 39\n                    }, this) : /*#__PURE__*/_jsxDEV(Wait, {\n                      title: \"Espera pela tua vez!\",\n                      points: this.state.points,\n                      rank: this.state.rank,\n                      storeButton: true,\n                      onStoreClick: this.handleStoreClick\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 472,\n                      columnNumber: 39\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 458,\n                    columnNumber: 35\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Wait, {\n          title: \"Espera pelo fim da jogada!\",\n          points: this.state.points,\n          rank: this.state.rank,\n          storeButton: false,\n          onStoreClick: this.handleStoreClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.storeOpen ? /*#__PURE__*/_jsxDEV(Store, {\n          points: this.state.points,\n          badges: this.state.badges,\n          userBadges: this.state.userBadges,\n          onPurchaseClick: this.handleBadgePurchased,\n          onCloseClick: this.handleCloseStoreClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Wait, {\n          title: \"Espera pelo in\\xEDcio do jogo!\",\n          points: this.state.points,\n          rank: this.state.rank,\n          storeButton: true,\n          onStoreClick: this.handleStoreClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/Histopólio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","w3cwebsocket","ReactDice","Link","Wait","Question","Store","Content","Continue","Play","constructor","props","state","gameStarted","playerTurn","showDice","rollTime","diceRolled","question","content","cardInfo","storeOpen","finishTurn","finishTurnInfo","badges","points","position","rank","userBadges","client","handleDiceClick","bind","handleAnswer","handleContentClick","handleInfoShownReceived","handleStoreClick","handleCloseStoreClick","handleBadgePurchased","handleFinishTurnReceived","handleContinueClick","handleFinishClick","componentDidMount","onopen","console","log","sendIdentificationMessage","loadBadges","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","user","sessionStorage","getItem","dataToSend","type","platform","id","sendToServer","stringify","userId","board","saveFile","send","command","handleGameStatusReceived","handleBadgesReceived","handleTurnReceived","handleQuestionReceived","handleUpdate","handleContentReceived","setState","sendJoinGameMessage","name","email","avatar","hideDice","answerIndex","answer","rollDoneCallback","num","result","Math","random","reactDice","rollAll","badgeId","cost","newUserBadges","push","newPoints","save","render","dice","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { w3cwebsocket } from \"websocket\";\nimport ReactDice from \"react-dice-complete\";\nimport { Link } from \"react-router-dom\";\nimport \"react-dice-complete/dist/react-dice-complete.css\";\n\nimport Wait from \"../components/Wait\";\nimport Question from \"../components/Question\";\nimport Store from \"../components/Store\";\nimport Content from \"../components/Content\";\nimport Continue from \"../components/Continue\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n\n    this.client = new w3cwebsocket(\"ws://localhost:8080\");\n\n    this.handleDiceClick = this.handleDiceClick.bind(this);\n    this.handleAnswer = this.handleAnswer.bind(this);\n    this.handleContentClick = this.handleContentClick.bind(this);\n    this.handleInfoShownReceived = this.handleInfoShownReceived.bind(this);\n    this.handleStoreClick = this.handleStoreClick.bind(this);\n    this.handleCloseStoreClick = this.handleCloseStoreClick.bind(this);\n    this.handleBadgePurchased = this.handleBadgePurchased.bind(this);\n    this.handleFinishTurnReceived = this.handleFinishTurnReceived.bind(this);\n    this.handleContinueClick = this.handleContinueClick.bind(this);\n    this.handleFinishClick = this.handleFinishClick.bind(this);\n  }\n\n  state = {\n    gameStarted: false,\n    playerTurn: false,\n    showDice: false,\n    rollTime: 0,\n    diceRolled: false,\n    question: null,\n    content: \"\",\n    cardInfo: false,\n    storeOpen: false,\n    finishTurn: false,\n    finishTurnInfo: \"\",\n    badges: [],\n    points: 0,\n    position: 0,\n    rank: 0,\n    userBadges: [],\n  };\n\n  componentDidMount() {\n    this.client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.loadBadges();\n      this.sendRequestGameStatusMessage();\n    };\n\n    this.client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"identification\",\n      platform: \"react\",\n      id: user.id,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"game status\",\n      userId: user.id,\n      board: \"Histopolio\", // TODO: ter no url\n      saveFile: \"Turma1.json\", // TODO: retirar\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  loadBadges() {\n    const dataToSend = {\n      type: \"load badges\",\n      board: \"Histopolio\", // TODO: ter no url\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    this.client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n        break;\n      case \"badges\":\n        this.handleBadgesReceived(dataReceived);\n        break;\n      case \"turn\":\n        this.handleTurnReceived();\n        break;\n      case \"info shown\":\n        this.handleInfoShownReceived();\n        break;\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      case \"update\":\n        this.handleUpdate(dataReceived);\n        break;\n      case \"content\":\n        this.handleContentReceived(dataReceived);\n        break;\n      case \"finish turn\":\n        this.handleFinishTurnReceived(dataReceived);\n        break;\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n\n    if (dataReceived[\"playerData\"]) {\n      this.setState({\n        points: dataReceived[\"playerData\"][\"points\"],\n        position: dataReceived[\"playerData\"][\"position\"],\n        rank: dataReceived[\"playerData\"][\"rank\"],\n        userBadges: dataReceived[\"playerData\"][\"badges\"],\n      });\n    }\n\n    if (this.state.gameStarted) {\n      this.sendJoinGameMessage();\n    }\n  }\n\n  handleBadgesReceived(dataReceived) {\n    this.setState({\n      badges: dataReceived[\"badges\"],\n    });\n  }\n\n  sendJoinGameMessage() {\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"join game\",\n      board: \"Histopolio\", // TODO: ter no url\n      userId: user.id,\n      name: user.name,\n      email: user.email,\n      avatar: user.avatar,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleTurnReceived() {\n    this.setState({\n      playerTurn: true,\n      showDice: true,\n    });\n  }\n\n  handleInfoShownReceived() {\n    this.setState({\n      cardInfo: true,\n    });\n\n    this.hideDice();\n  }\n\n  hideDice() {\n    this.setState({\n      showDice: false,\n      rollTime: 0,\n      diceRolled: false,\n    });\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      playerTurn: true,\n      question: dataReceived[\"questionData\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleUpdate(dataReceived) {\n    this.setState({\n      points: dataReceived[\"points\"],\n      position: dataReceived[\"position\"],\n      rank: dataReceived[\"rank\"],\n    });\n  }\n\n  handleContentReceived(dataReceived) {\n    this.setState({\n      content: dataReceived[\"content\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleFinishTurnReceived(dataReceived) {\n    this.setState({\n      finishTurn: true,\n      finishTurnInfo: dataReceived[\"info\"],\n    });\n\n    this.hideDice();\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ question: null });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContentClick() {\n    this.setState({ content: \"\" });\n\n    const dataToSend = {\n      type: \"content viewed\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  rollDoneCallback(num) {\n    const dataToSend = {\n      type: \"dice result\",\n      result: num,\n      rollTime: this.state.rollTime * 1000,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleDiceClick() {\n    if (!this.state.diceRolled) {\n      const rollTime = Math.random() * 2 + 1;\n\n      this.setState({\n        rollTime: rollTime,\n        diceRolled: true,\n      });\n\n      this.reactDice.rollAll();\n    }\n  }\n\n  handleStoreClick() {\n    this.setState({\n      storeOpen: true,\n    });\n  }\n\n  handleCloseStoreClick() {\n    this.setState({\n      storeOpen: false,\n    });\n  }\n\n  handleBadgePurchased(badgeId, cost) {\n    const newUserBadges = [...this.state.userBadges];\n    newUserBadges.push(badgeId);\n    const newPoints = this.state.points - cost;\n\n    this.setState({\n      points: newPoints,\n      userBadges: newUserBadges,\n    });\n\n    const user = JSON.parse(sessionStorage.getItem(\"user\"));\n\n    const dataToSend = {\n      type: \"badge purchased\",\n      userId: user.id,\n      board: \"Histopolio\", // TODO: usar url\n      save: \"Turma1\", // TODO: usar url\n      badgeId: badgeId,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleContinueClick() {\n    this.setState({\n      cardInfo: false,\n    });\n\n    const dataToSend = {\n      type: \"continue\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  handleFinishClick() {\n    this.setState({\n      finishTurn: false,\n      finishTurnInfo: \"\",\n      playerTurn: false,\n    });\n\n    const dataToSend = {\n      type: \"next player\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    return (\n      <div>\n        <nav aria-label=\"breadcrumb\" className=\"m-4\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              Histopolio\n            </li>\n          </ol>\n        </nav>\n        {this.state.gameStarted ? (\n          <div>\n            {this.state.playerTurn ? (\n              <div>\n                {this.state.showDice ? (\n                  <div>\n                    {this.state.storeOpen ? (\n                      <Store\n                        points={this.state.points}\n                        badges={this.state.badges}\n                        userBadges={this.state.userBadges}\n                        onPurchaseClick={this.handleBadgePurchased}\n                        onCloseClick={this.handleCloseStoreClick}\n                      />\n                    ) : (\n                      <div className=\"text-center page-center\">\n                        <h2>Lança o dado!</h2>\n                        <div className=\"mt-4\" onClick={this.handleDiceClick}>\n                          <ReactDice\n                            numDice={1}\n                            faceColor=\"#ffF\"\n                            dotColor=\"#000000\"\n                            outline={true}\n                            dieSize={200}\n                            rollTime={this.state.rollTime}\n                            rollDone={(num) => this.rollDoneCallback(num)}\n                            disableIndividual={true}\n                            ref={(dice) => (this.reactDice = dice)}\n                          />\n                        </div>\n                        <div className=\"mt-4\">\n                          {this.state.rank !== 0 && (\n                            <h4>Estás em {this.state.rank}º lugar</h4>\n                          )}\n                          <h5>\n                            Tens {this.state.points} ponto\n                            {this.state.points !== 1 && \"s\"}\n                          </h5>\n                        </div>\n                        <button\n                          className=\"btn btn-lg btn-primary mt-4\"\n                          onClick={this.handleStoreClick}\n                          disabled={this.state.diceRolled}\n                        >\n                          Comprar troféus\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div>\n                    {this.state.question ? (\n                      <Question\n                        question={this.state.question}\n                        onAnswerClick={this.handleAnswer}\n                        rank={this.state.rank}\n                        points={this.state.points}\n                      />\n                    ) : (\n                      <div>\n                        {this.state.content.length > 0 ? (\n                          <Content\n                            content={this.state.content}\n                            onContentClick={this.handleContentClick}\n                            points={this.state.points}\n                            rank={this.state.rank}\n                          />\n                        ) : (\n                          <div>\n                            {this.state.finishTurn ? (\n                              <div>\n                                {this.state.storeOpen ? (\n                                  <Store\n                                    points={this.state.points}\n                                    badges={this.state.badges}\n                                    userBadges={this.state.userBadges}\n                                    onPurchaseClick={this.handleBadgePurchased}\n                                    onCloseClick={this.handleCloseStoreClick}\n                                  />\n                                ) : (\n                                  <Continue\n                                    info={this.state.finishTurnInfo}\n                                    onContinueClick={this.handleFinishClick}\n                                    points={this.state.points}\n                                    rank={this.state.rank}\n                                    storeButton={true}\n                                    onStoreClick={this.handleStoreClick}\n                                  />\n                                )}\n                              </div>\n                            ) : (\n                              <div>\n                                {this.state.cardInfo ? (\n                                  <Continue\n                                    info={this.state.finishTurnInfo}\n                                    onContinueClick={this.handleContinueClick}\n                                    points={this.state.points}\n                                    rank={this.state.rank}\n                                    storeButton={false}\n                                    onStoreClick={this.handleStoreClick}\n                                  />\n                                ) : (\n                                  <div>\n                                    {this.state.storeOpen ? (\n                                      <Store\n                                        points={this.state.points}\n                                        badges={this.state.badges}\n                                        userBadges={this.state.userBadges}\n                                        onPurchaseClick={\n                                          this.handleBadgePurchased\n                                        }\n                                        onCloseClick={\n                                          this.handleCloseStoreClick\n                                        }\n                                      />\n                                    ) : (\n                                      <Wait\n                                        title=\"Espera pela tua vez!\"\n                                        points={this.state.points}\n                                        rank={this.state.rank}\n                                        storeButton={true}\n                                        onStoreClick={this.handleStoreClick}\n                                      />\n                                    )}\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ) : (\n              <Wait\n                title=\"Espera pelo fim da jogada!\"\n                points={this.state.points}\n                rank={this.state.rank}\n                storeButton={false}\n                onStoreClick={this.handleStoreClick}\n              />\n            )}\n          </div>\n        ) : (\n          <div>\n            {this.state.storeOpen ? (\n              <Store\n                points={this.state.points}\n                badges={this.state.badges}\n                userBadges={this.state.userBadges}\n                onPurchaseClick={this.handleBadgePurchased}\n                onCloseClick={this.handleCloseStoreClick}\n              />\n            ) : (\n              <Wait\n                title=\"Espera pelo início do jogo!\"\n                points={this.state.points}\n                rank={this.state.rank}\n                storeButton={true}\n                onStoreClick={this.handleStoreClick}\n              />\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}