{"ast":null,"code":"var _jsxFileName = \"/home/andre/Desktop/Histop\\xF3lio/histopolio/histopolio-app/client/src/app/pages/Play.jsx\";\nimport React, { Component } from \"react\";\nimport { w3cwebsocket } from 'websocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameStarted: false,\n      showQuestion: false,\n      question: \"\",\n      answers: []\n    };\n  }\n\n  componentDidMount() {\n    client = new w3cwebsocket(\"ws://localhost:8080\");\n\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    client.onmessage = message => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: \"identification\",\n      id: \"react\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const dataToSend = {\n      type: \"game status\"\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"question\"],\n      answers: dataReceived[\"answers\"],\n      showQuestion: true\n    });\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"]\n    });\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({\n      showQuestion: false\n    });\n    const answer = answerIndex + 1;\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer\n    };\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    if (this.gameStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.showQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), this.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.handleAnswer(index);\n            },\n            children: answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Espera pela tua vez!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Espera pelo in\\xEDcio do jogo!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default Play;","map":{"version":3,"sources":["/home/andre/Desktop/Histopólio/histopolio/histopolio-app/client/src/app/pages/Play.jsx"],"names":["React","Component","w3cwebsocket","Play","constructor","props","state","gameStarted","showQuestion","question","answers","componentDidMount","client","onopen","console","log","sendIdentificationMessage","sendRequestGameStatusMessage","onmessage","message","data","dataReceived","JSON","parse","processDataReceived","dataToSend","type","id","sendToServer","stringify","send","command","handleQuestionReceived","handleGameStatusReceived","setState","handleAnswer","answerIndex","answer","render","map","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { w3cwebsocket } from 'websocket';\n\nclass Play extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    gameStarted: false,\n    showQuestion: false,\n    question: \"\",\n    answers: [],\n  };\n\n  componentDidMount() {\n    client = new w3cwebsocket(\"ws://localhost:8080\");\n\n    client.onopen = () => {\n      console.log(\"WebSocket Client Connected\");\n\n      this.sendIdentificationMessage();\n      this.sendRequestGameStatusMessage();\n    };\n\n    client.onmessage = (message) => {\n      console.log(message.data);\n      const dataReceived = JSON.parse(message.data);\n\n      this.processDataReceived(dataReceived);\n    };\n  }\n\n  sendIdentificationMessage() {\n    const dataToSend = {\n      type: \"identification\",\n      id: \"react\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendRequestGameStatusMessage() {\n    const dataToSend = {\n      type: \"game status\",\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  sendToServer(message) {\n    client.send(message);\n  }\n\n  processDataReceived(dataReceived) {\n    const command = dataReceived[\"type\"];\n\n    switch (command) {\n      case \"question\":\n        this.handleQuestionReceived(dataReceived);\n        break;\n      case \"game status\":\n        this.handleGameStatusReceived(dataReceived);\n      default:\n        console.log(\"Unknown message: \" + dataReceived);\n    }\n  }\n\n  handleQuestionReceived(dataReceived) {\n    this.setState({\n      question: dataReceived[\"question\"],\n      answers: dataReceived[\"answers\"],\n      showQuestion: true,\n    });\n  }\n\n  handleGameStatusReceived(dataReceived) {\n    this.setState({\n      gameStarted: dataReceived[\"gameStarted\"],\n    });\n  }\n\n  handleAnswer(answerIndex) {\n    this.setState({ showQuestion: false });\n\n    const answer = answerIndex + 1;\n\n    const dataToSend = {\n      type: \"answer\",\n      answer: answer,\n    };\n\n    this.sendToServer(JSON.stringify(dataToSend));\n  }\n\n  render() {\n    if (this.gameStarted) {\n      return (\n        <div>\n          {this.showQuestion ? (\n            <div>\n              <p>{this.question}</p>\n              {this.answers.map((answer, index) => (\n                <button\n                  onClick={() => {\n                    this.handleAnswer(index);\n                  }}\n                >\n                  {answer}\n                </button>\n              ))}\n            </div>\n          ) : (\n            <p>Espera pela tua vez!</p>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <p>Espera pelo início do jogo!</p>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Play;\n"]},"metadata":{},"sourceType":"module"}